name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Replace API credentials
      run: |
        # Replace Groq API key in main.html
        echo "üîç Checking for Groq API key secret..."
        if [ -n "${{ secrets.GROQ_API_KEY }}" ]; then
          echo "‚úÖ Groq API key secret found, injecting into main.html..."
          echo "üîç Before replacement:"
          grep "window.GROQ_API_KEY" main.html | head -1
          sed -i "s|window.GROQ_API_KEY = null;|window.GROQ_API_KEY = '${{ secrets.GROQ_API_KEY }}';|g" main.html
          echo "üîç After replacement:"
          grep "window.GROQ_API_KEY" main.html | head -1
          echo "‚úÖ Groq API key injected successfully"
        else
          echo "‚ùå No Groq API key found in GitHub secrets - chatbot features may not work"
          echo "üí° To fix this: Go to Settings > Secrets and variables > Actions > Add 'GROQ_API_KEY'"
        fi
        
        # Replace YouTube API key in main.html
        echo "üîç Checking for YouTube API key secret..."
        if [ -n "${{ secrets.YOUTUBE_API_KEY }}" ]; then
          echo "‚úÖ YouTube API key secret found, injecting into main.html..."
          echo "üîç Before replacement:"
          grep "window.YOUTUBE_API_KEY" main.html | head -1
          sed -i "s|window.YOUTUBE_API_KEY = null;|window.YOUTUBE_API_KEY = '${{ secrets.YOUTUBE_API_KEY }}';|g" main.html
          echo "üîç After replacement:"
          grep "window.YOUTUBE_API_KEY" main.html | head -1
          echo "‚úÖ YouTube API key injected successfully"
        else
          echo "‚ùå No YouTube API key found in GitHub secrets - videos will show unavailable overlay"
          echo "üí° To fix this: Go to Settings > Secrets and variables > Actions > Add 'YOUTUBE_API_KEY'"
        fi
        
        # Replace EmailJS credentials in main.html and newsletter-admin.html
        echo "üîç Checking for EmailJS credentials..."
        if [ -n "${{ secrets.EMAILJS_PUBLIC_KEY }}" ] && [ -n "${{ secrets.EMAILJS_SERVICE_ID }}" ] && [ -n "${{ secrets.EMAILJS_WELCOME_TEMPLATE_ID }}" ] && [ -n "${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE_ID }}" ]; then
          echo "‚úÖ EmailJS credentials found, injecting into files..."
          
          # Replace in main.html
          echo "üîç Before EmailJS replacement in main.html:"
          grep "YOUR_EMAILJS_PUBLIC_KEY" main.html | head -1
          sed -i "s|YOUR_EMAILJS_PUBLIC_KEY|${{ secrets.EMAILJS_PUBLIC_KEY }}|g" main.html
          sed -i "s|YOUR_EMAILJS_SERVICE_ID|${{ secrets.EMAILJS_SERVICE_ID }}|g" main.html
          sed -i "s|YOUR_EMAILJS_WELCOME_TEMPLATE_ID|${{ secrets.EMAILJS_WELCOME_TEMPLATE_ID }}|g" main.html
          echo "üîç After EmailJS replacement in main.html:"
          grep "emailjs.init" main.html | head -1
          echo "‚úÖ EmailJS credentials injected into main.html"
          
          # Replace in newsletter-admin.html
          if [ -f "newsletter-admin.html" ]; then
            echo "üîç Before EmailJS replacement in newsletter-admin.html:"
            grep "YOUR_EMAILJS_PUBLIC_KEY" newsletter-admin.html | head -1
            sed -i "s|YOUR_EMAILJS_PUBLIC_KEY|${{ secrets.EMAILJS_PUBLIC_KEY }}|g" newsletter-admin.html
            sed -i "s|YOUR_EMAILJS_SERVICE_ID|${{ secrets.EMAILJS_SERVICE_ID }}|g" newsletter-admin.html
            sed -i "s|YOUR_EMAILJS_NEWSLETTER_TEMPLATE_ID|${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE_ID }}|g" newsletter-admin.html
            echo "üîç After EmailJS replacement in newsletter-admin.html:"
            grep "emailjs.init" newsletter-admin.html | head -1
            echo "‚úÖ EmailJS credentials injected into newsletter-admin.html"
          fi
          
          echo "‚úÖ EmailJS credentials injected successfully"
        else
          echo "‚ùå No EmailJS credentials found in GitHub secrets - newsletter features may not work"
          echo "üí° To fix this: Go to Settings > Secrets and variables > Actions > Add 'EMAILJS_PUBLIC_KEY', 'EMAILJS_SERVICE_ID', 'EMAILJS_WELCOME_TEMPLATE_ID', and 'EMAILJS_NEWSLETTER_TEMPLATE_ID'"
        fi
        
        # Replace EmailJS credentials individually (fallback for partial setup)
        echo "üîç Checking for individual EmailJS credentials..."
        
        # Replace EmailJS Public Key if available
        if [ -n "${{ secrets.EMAILJS_PUBLIC_KEY }}" ]; then
          echo "‚úÖ EmailJS Public Key found, injecting..."
          sed -i "s|YOUR_EMAILJS_PUBLIC_KEY|${{ secrets.EMAILJS_PUBLIC_KEY }}|g" main.html
          sed -i "s|YOUR_EMAILJS_PUBLIC_KEY|${{ secrets.EMAILJS_PUBLIC_KEY }}|g" newsletter-admin.html
        fi
        
        # Replace EmailJS Service ID if available
        if [ -n "${{ secrets.EMAILJS_SERVICE_ID }}" ]; then
          echo "‚úÖ EmailJS Service ID found, injecting..."
          sed -i "s|YOUR_EMAILJS_SERVICE_ID|${{ secrets.EMAILJS_SERVICE_ID }}|g" main.html
          sed -i "s|YOUR_EMAILJS_SERVICE_ID|${{ secrets.EMAILJS_SERVICE_ID }}|g" newsletter-admin.html
        fi
        
        # Replace EmailJS Welcome Template ID if available
        if [ -n "${{ secrets.EMAILJS_WELCOME_TEMPLATE_ID }}" ]; then
          echo "‚úÖ EmailJS Welcome Template ID found, injecting..."
          sed -i "s|YOUR_EMAILJS_WELCOME_TEMPLATE_ID|${{ secrets.EMAILJS_WELCOME_TEMPLATE_ID }}|g" main.html
        fi
        
        # Replace EmailJS Newsletter Template ID if available
        if [ -n "${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE_ID }}" ]; then
          echo "‚úÖ EmailJS Newsletter Template ID found, injecting..."
          sed -i "s|YOUR_EMAILJS_NEWSLETTER_TEMPLATE_ID|${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE_ID }}|g" newsletter-admin.html
        fi
        
        # Verify the replacements worked (for debugging)
        echo "üîç Groq API key status in main.html:"
        grep "GROQ_API_KEY" main.html | head -1
        echo "üîç YouTube API key status in main.html:"
        grep "YOUTUBE_API_KEY" main.html | head -1
        echo "üîç EmailJS credentials status in main.html:"
        grep "emailjs.init" main.html | head -1
        
        # Count how many API key replacements were made
        echo "üîç Groq API key replacement count:"
        grep -c "window.GROQ_API_KEY" main.html || echo "0"
        echo "üîç YouTube API key replacement count:"
        grep -c "window.YOUTUBE_API_KEY" main.html || echo "0"
        echo "üîç EmailJS replacement count:"
        grep -c "emailjs.init" main.html || echo "0"
        
        # Check if API keys are properly set (not null)
        echo "üîç Final API key verification:"
        if grep -q "window.GROQ_API_KEY = '[^']*';" main.html; then
          echo "‚úÖ Groq API key is properly set"
        else
          echo "‚ùå Groq API key is still null or not found"
        fi
        
        if grep -q "window.YOUTUBE_API_KEY = '[^']*';" main.html; then
          echo "‚úÖ YouTube API key is properly set"
        else
          echo "‚ùå YouTube API key is still null or not found"
        fi
        
        if grep -q "emailjs.init('[^']*');" main.html; then
          echo "‚úÖ EmailJS credentials are properly set"
        else
          echo "‚ùå EmailJS credentials are still using placeholder values"
        fi
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4